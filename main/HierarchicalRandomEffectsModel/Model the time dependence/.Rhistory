for(i in 1:M){
for(j in 1:S){
lambda[i,j] <- length(Ireland_monthly[[i]][which(Ireland_monthly[[i]][,j]>thresholds[i,j]),j])/r[i]
}
}
lambda
maxim <- matrix(NA,M,S)
for(i in 1:M){
for(j in 1:S){
maxim[i,j] <- max(Ireland_monthly[[i]][,j])
}
}
maxim
code <- nimbleCode({
for(i in 1:M){
ydec[,i] ~ dmyModel_lpost(threshold[i,1],exp(logsigma[i,1]),xi[i,1],lambda[i,1],alpha[i,1])
y_jan[,i] ~ dmyModel_lpost(threshold[i,2],exp(logsigma[i,2]),xi[i,2],lambda[i,2],alpha[i,2])
y_feb[,i] ~ dmyModel_lpost(threshold[i,3],exp(logsigma[i,3]),xi[i,3],lambda[i,3],alpha[i,3])
y_mar[,i] ~ dmyModel_lpost(threshold[i,4],exp(logsigma[i,4]),xi[i,4],lambda[i,4],alpha[i,4])
y_apr[,i] ~ dmyModel_lpost(threshold[i,5],exp(logsigma[i,5]),xi[i,5],lambda[i,5],alpha[i,5])
y_may[,i] ~ dmyModel_lpost(threshold[i,6],exp(logsigma[i,6]),xi[i,6],lambda[i,6],alpha[i,6])
y_jun[,i] ~ dmyModel_lpost(threshold[i,7],exp(logsigma[i,7]),xi[i,7],lambda[i,7],alpha[i,7])
y_jul[,i] ~ dmyModel_lpost(threshold[i,8],exp(logsigma[i,8]),xi[i,8],lambda[i,8],alpha[i,8])
y_aug[,i] ~ dmyModel_lpost(threshold[i,9],exp(logsigma[i,9]),xi[i,9],lambda[i,9],alpha[i,9])
y_sep[,i] ~ dmyModel_lpost(threshold[i,10],exp(logsigma[i,10]),xi[i,10],lambda[i,10],alpha[i,10])
y_oct[,i] ~ dmyModel_lpost(threshold[i,11],exp(logsigma[i,11]),xi[i,11],lambda[i,11],alpha[i,11])
y_nov[,i] ~ dmyModel_lpost(threshold[i,12],exp(logsigma[i,12]),xi[i,12],lambda[i,12],alpha[i,12])}
for(i in 1:M){
for(j in 1:S){
logsigma[i,j] ~ dnorm(a_sigma,phi_sigma)
xi[i,j] ~ dnorm(a_xi,phi_xi)
constraint_data[i,j] ~ dconstraint( xi[i,j] + exp(logsigma[i,j])/(maxim[i,j]-threshold[i,j])>0)
alpha[i,j] ~ dunif(0,1)}}
a_sigma ~ dnorm(b,c)
a_xi ~ dnorm(b,c)
# phi_sigma ~ dgamma(f,f)
# phi_xi ~ dgamma(f,f)
phi_sigma ~ dunif(d,e)
phi_xi ~ dunif(f,g)
})
pumpConsts <- list(M= M, N=N, threshold=thresholds, lambda=lambda,maxim=maxim, b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2)
pumpData <-list(y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]],)
pumpData <-list(y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]])
Hmodel <- nimbleModel(code=code, name ="Hmodel", constants = pumpConsts, data=pumpData)
code <- nimbleCode({
for(i in 1:M){
ydec[1:len[1],i] ~ dmyModel_lpost(threshold[i,1],exp(logsigma[i,1]),xi[i,1],lambda[i,1],alpha[i,1])
y_jan[1:len[2],i] ~ dmyModel_lpost(threshold[i,2],exp(logsigma[i,2]),xi[i,2],lambda[i,2],alpha[i,2])
y_feb[1:len[3],i] ~ dmyModel_lpost(threshold[i,3],exp(logsigma[i,3]),xi[i,3],lambda[i,3],alpha[i,3])
y_mar[1:len[4],i] ~ dmyModel_lpost(threshold[i,4],exp(logsigma[i,4]),xi[i,4],lambda[i,4],alpha[i,4])
y_apr[1:len[5],i] ~ dmyModel_lpost(threshold[i,5],exp(logsigma[i,5]),xi[i,5],lambda[i,5],alpha[i,5])
y_may[1:len[6],i] ~ dmyModel_lpost(threshold[i,6],exp(logsigma[i,6]),xi[i,6],lambda[i,6],alpha[i,6])
y_jun[1:len[7],i] ~ dmyModel_lpost(threshold[i,7],exp(logsigma[i,7]),xi[i,7],lambda[i,7],alpha[i,7])
y_jul[1:len[8],i] ~ dmyModel_lpost(threshold[i,8],exp(logsigma[i,8]),xi[i,8],lambda[i,8],alpha[i,8])
y_aug[1:len[9],i] ~ dmyModel_lpost(threshold[i,9],exp(logsigma[i,9]),xi[i,9],lambda[i,9],alpha[i,9])
y_sep[1:len[10],i] ~ dmyModel_lpost(threshold[i,10],exp(logsigma[i,10]),xi[i,10],lambda[i,10],alpha[i,10])
y_oct[1:len[11],i] ~ dmyModel_lpost(threshold[i,11],exp(logsigma[i,11]),xi[i,11],lambda[i,11],alpha[i,11])
y_nov[1:len[12],i] ~ dmyModel_lpost(threshold[i,12],exp(logsigma[i,12]),xi[i,12],lambda[i,12],alpha[i,12])}
for(i in 1:M){
for(j in 1:S){
logsigma[i,j] ~ dnorm(a_sigma,phi_sigma)
xi[i,j] ~ dnorm(a_xi,phi_xi)
constraint_data[i,j] ~ dconstraint( xi[i,j] + exp(logsigma[i,j])/(maxim[i,j]-threshold[i,j])>0)
alpha[i,j] ~ dunif(0,1)}}
a_sigma ~ dnorm(b,c)
a_xi ~ dnorm(b,c)
# phi_sigma ~ dgamma(f,f)
# phi_xi ~ dgamma(f,f)
phi_sigma ~ dunif(d,e)
phi_xi ~ dunif(f,g)
})
pumpConsts <- list(M= M, N=N, threshold=thresholds, lambda=lambda,maxim=maxim, len=r/5, b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2)
pumpData <-list(y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]])
Hmodel <- nimbleModel(code=code, name ="Hmodel", constants = pumpConsts, data=pumpData)
pumpConsts <- list(M= M, S=S, threshold=thresholds, lambda=lambda,maxim=maxim, len=r/5, b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2)
pumpData <-list(y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]])
Hmodel <- nimbleModel(code=code, name ="Hmodel", constants = pumpConsts, data=pumpData)
S
M
code <- nimbleCode({
for(i in 1:M){
ydec[1:len[1],i] ~ dmyModel_lpost(threshold[i,1],exp(logsigma[i,1]),xi[i,1],lambda[i,1],alpha[i,1])
y_jan[1:len[2],i] ~ dmyModel_lpost(threshold[i,2],exp(logsigma[i,2]),xi[i,2],lambda[i,2],alpha[i,2])
y_feb[1:len[3],i] ~ dmyModel_lpost(threshold[i,3],exp(logsigma[i,3]),xi[i,3],lambda[i,3],alpha[i,3])
y_mar[1:len[4],i] ~ dmyModel_lpost(threshold[i,4],exp(logsigma[i,4]),xi[i,4],lambda[i,4],alpha[i,4])
y_apr[1:len[5],i] ~ dmyModel_lpost(threshold[i,5],exp(logsigma[i,5]),xi[i,5],lambda[i,5],alpha[i,5])
y_may[1:len[6],i] ~ dmyModel_lpost(threshold[i,6],exp(logsigma[i,6]),xi[i,6],lambda[i,6],alpha[i,6])
y_jun[1:len[7],i] ~ dmyModel_lpost(threshold[i,7],exp(logsigma[i,7]),xi[i,7],lambda[i,7],alpha[i,7])
y_jul[1:len[8],i] ~ dmyModel_lpost(threshold[i,8],exp(logsigma[i,8]),xi[i,8],lambda[i,8],alpha[i,8])
y_aug[1:len[9],i] ~ dmyModel_lpost(threshold[i,9],exp(logsigma[i,9]),xi[i,9],lambda[i,9],alpha[i,9])
y_sep[1:len[10],i] ~ dmyModel_lpost(threshold[i,10],exp(logsigma[i,10]),xi[i,10],lambda[i,10],alpha[i,10])
y_oct[1:len[11],i] ~ dmyModel_lpost(threshold[i,11],exp(logsigma[i,11]),xi[i,11],lambda[i,11],alpha[i,11])
y_nov[1:len[12],i] ~ dmyModel_lpost(threshold[i,12],exp(logsigma[i,12]),xi[i,12],lambda[i,12],alpha[i,12])}
for(i in 1:M){
for(j in 1:S){
logsigma[i,j] ~ dnorm(a_sigma,phi_sigma)
xi[i,j] ~ dnorm(a_xi,phi_xi)
constraint_data[i,j] ~ dconstraint( xi[i,j] + exp(logsigma[i,j])/(maxim[i,j]-threshold[i,j])>0)
alpha[i,j] ~ dunif(0,1)}}
a_sigma ~ dnorm(b,c)
a_xi ~ dnorm(b,c)
# phi_sigma ~ dgamma(f,f)
# phi_xi ~ dgamma(f,f)
phi_sigma ~ dunif(d,e)
phi_xi ~ dunif(f,g)
})
S
code <- nimbleCode({
for(j in 1:S){
ydec[1:len[1],j] ~ dmyModel_lpost(threshold[1,j],exp(logsigma[1,j]),xi[1,j],lambda[1,j],alpha[1,j])
y_jan[1:len[2],j] ~ dmyModel_lpost(threshold[2,j],exp(logsigma[2,j]),xi[2,j],lambda[2,j],alpha[2,j])
y_feb[1:len[3],j] ~ dmyModel_lpost(threshold[3,j],exp(logsigma[3,j]),xi[3,j],lambda[3,j],alpha[3,j])
y_mar[1:len[4],j] ~ dmyModel_lpost(threshold[4,j],exp(logsigma[4,j]),xi[4,j],lambda[4,j],alpha[4,j])
y_apr[1:len[5],j] ~ dmyModel_lpost(threshold[5,j],exp(logsigma[5,j]),xi[5,j],lambda[5,j],alpha[5,j])
y_may[1:len[6],j] ~ dmyModel_lpost(threshold[6,j],exp(logsigma[6,j]),xi[6,j],lambda[6,j],alpha[6,j])
y_jun[1:len[7],j] ~ dmyModel_lpost(threshold[7,j],exp(logsigma[7,j]),xi[7,j],lambda[7,j],alpha[7,j])
y_jul[1:len[8],j] ~ dmyModel_lpost(threshold[8,j],exp(logsigma[8,j]),xi[8,j],lambda[8,j],alpha[8,j])
y_aug[1:len[9],j] ~ dmyModel_lpost(threshold[9,j],exp(logsigma[9,j]),xi[9,j],lambda[9,j],alpha[9,j])
y_sep[1:len[10],j] ~ dmyModel_lpost(threshold[10,j],exp(logsigma[10,j]),xi[10,j],lambda[10,j],alpha[10,j])
y_oct[1:len[11],j] ~ dmyModel_lpost(threshold[11,j],exp(logsigma[11,j]),xi[11,j],lambda[11,j],alpha[11,j])
y_nov[1:len[12],j] ~ dmyModel_lpost(threshold[12,j],exp(logsigma[12,j]),xi[12,j],lambda[12,j],alpha[12,j])}
for(i in 1:M){
for(j in 1:S){
logsigma[i,j] ~ dnorm(a_sigma,phi_sigma)
xi[i,j] ~ dnorm(a_xi,phi_xi)
constraint_data[i,j] ~ dconstraint( xi[i,j] + exp(logsigma[i,j])/(maxim[i,j]-threshold[i,j])>0)
alpha[i,j] ~ dunif(0,1)}}
a_sigma ~ dnorm(b,c)
a_xi ~ dnorm(b,c)
# phi_sigma ~ dgamma(f,f)
# phi_xi ~ dgamma(f,f)
phi_sigma ~ dunif(d,e)
phi_xi ~ dunif(f,g)
})
pumpConsts <- list(M= M, S=S, threshold=thresholds, lambda=lambda,maxim=maxim, len=r/5, b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2)
pumpData <-list(y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]])
Hmodel <- nimbleModel(code=code, name ="Hmodel", constants = pumpConsts, data=pumpData)
code <- nimbleCode({
for(j in 1:S){
y_dec[1:len[1],j] ~ dmyModel_lpost(threshold[1,j],exp(logsigma[1,j]),xi[1,j],lambda[1,j],alpha[1,j])
y_jan[1:len[2],j] ~ dmyModel_lpost(threshold[2,j],exp(logsigma[2,j]),xi[2,j],lambda[2,j],alpha[2,j])
y_feb[1:len[3],j] ~ dmyModel_lpost(threshold[3,j],exp(logsigma[3,j]),xi[3,j],lambda[3,j],alpha[3,j])
y_mar[1:len[4],j] ~ dmyModel_lpost(threshold[4,j],exp(logsigma[4,j]),xi[4,j],lambda[4,j],alpha[4,j])
y_apr[1:len[5],j] ~ dmyModel_lpost(threshold[5,j],exp(logsigma[5,j]),xi[5,j],lambda[5,j],alpha[5,j])
y_may[1:len[6],j] ~ dmyModel_lpost(threshold[6,j],exp(logsigma[6,j]),xi[6,j],lambda[6,j],alpha[6,j])
y_jun[1:len[7],j] ~ dmyModel_lpost(threshold[7,j],exp(logsigma[7,j]),xi[7,j],lambda[7,j],alpha[7,j])
y_jul[1:len[8],j] ~ dmyModel_lpost(threshold[8,j],exp(logsigma[8,j]),xi[8,j],lambda[8,j],alpha[8,j])
y_aug[1:len[9],j] ~ dmyModel_lpost(threshold[9,j],exp(logsigma[9,j]),xi[9,j],lambda[9,j],alpha[9,j])
y_sep[1:len[10],j] ~ dmyModel_lpost(threshold[10,j],exp(logsigma[10,j]),xi[10,j],lambda[10,j],alpha[10,j])
y_oct[1:len[11],j] ~ dmyModel_lpost(threshold[11,j],exp(logsigma[11,j]),xi[11,j],lambda[11,j],alpha[11,j])
y_nov[1:len[12],j] ~ dmyModel_lpost(threshold[12,j],exp(logsigma[12,j]),xi[12,j],lambda[12,j],alpha[12,j])}
for(i in 1:M){
for(j in 1:S){
logsigma[i,j] ~ dnorm(a_sigma,phi_sigma)
xi[i,j] ~ dnorm(a_xi,phi_xi)
constraint_data[i,j] ~ dconstraint( xi[i,j] + exp(logsigma[i,j])/(maxim[i,j]-threshold[i,j])>0)
alpha[i,j] ~ dunif(0,1)}}
a_sigma ~ dnorm(b,c)
a_xi ~ dnorm(b,c)
# phi_sigma ~ dgamma(f,f)
# phi_xi ~ dgamma(f,f)
phi_sigma ~ dunif(d,e)
phi_xi ~ dunif(f,g)
})
pumpConsts <- list(M= M, S=S, threshold=thresholds, lambda=lambda,maxim=maxim, len=r/5, b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2)
pumpData <-list(y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]])
Hmodel <- nimbleModel(code=code, name ="Hmodel", constants = pumpConsts, data=pumpData)
mcmc.out <- nimbleMCMC(model = Hmodel,
niter =6000, nchains = 3, thin = 10, nburnin = 1000,
monitors = c("a_sigma","a_xi","phi_sigma","phi_xi", "logsigma", "xi", "alpha"),
summary = TRUE, WAIC = TRUE, setSeed = TRUE, samplesAsCodaMCMC = TRUE)
coda_chain <- mcmc.out$samples
summary(coda_chain)
x11()
acfplot(coda_chain)
mcmc.out <- nimbleMCMC(model = Hmodel,
niter =20000, nchains = 3, thin = 10, nburnin = 4000,
monitors = c("a_sigma","a_xi","phi_sigma","phi_xi", "logsigma", "xi", "alpha"),
summary = TRUE, WAIC = TRUE, setSeed = TRUE, samplesAsCodaMCMC = TRUE)
coda_chain <- mcmc.out$samples
summary(coda_chain)
gelman.diag(coda_chain, confidence = 0.95,  autoburnin = TRUE, multivariate=TRUE)
x11()
acfplot(coda_chain)
code <- nimbleCode({
for(j in 1:S){
y_dec[1:len[1],j] ~ dmyModel_lpost(threshold[1,j],exp(logsigma[1,j]),xi[1,j],lambda[1,j],alpha[1,j])
y_jan[1:len[2],j] ~ dmyModel_lpost(threshold[2,j],exp(logsigma[2,j]),xi[2,j],lambda[2,j],alpha[2,j])
y_feb[1:len[3],j] ~ dmyModel_lpost(threshold[3,j],exp(logsigma[3,j]),xi[3,j],lambda[3,j],alpha[3,j])
y_mar[1:len[4],j] ~ dmyModel_lpost(threshold[4,j],exp(logsigma[4,j]),xi[4,j],lambda[4,j],alpha[4,j])
y_apr[1:len[5],j] ~ dmyModel_lpost(threshold[5,j],exp(logsigma[5,j]),xi[5,j],lambda[5,j],alpha[5,j])
y_may[1:len[6],j] ~ dmyModel_lpost(threshold[6,j],exp(logsigma[6,j]),xi[6,j],lambda[6,j],alpha[6,j])
y_jun[1:len[7],j] ~ dmyModel_lpost(threshold[7,j],exp(logsigma[7,j]),xi[7,j],lambda[7,j],alpha[7,j])
y_jul[1:len[8],j] ~ dmyModel_lpost(threshold[8,j],exp(logsigma[8,j]),xi[8,j],lambda[8,j],alpha[8,j])
y_aug[1:len[9],j] ~ dmyModel_lpost(threshold[9,j],exp(logsigma[9,j]),xi[9,j],lambda[9,j],alpha[9,j])
y_sep[1:len[10],j] ~ dmyModel_lpost(threshold[10,j],exp(logsigma[10,j]),xi[10,j],lambda[10,j],alpha[10,j])
y_oct[1:len[11],j] ~ dmyModel_lpost(threshold[11,j],exp(logsigma[11,j]),xi[11,j],lambda[11,j],alpha[11,j])
y_nov[1:len[12],j] ~ dmyModel_lpost(threshold[12,j],exp(logsigma[12,j]),xi[12,j],lambda[12,j],alpha[12,j])}
for(j in 1:S){
for(i in 1:M){
logsigma[i,j] <- gamma_sigma[i]+ eps_sigma[j]
xi[i,j] <- gamma_xi[i]+ eps_xi[j]
constraint_data[i,j] ~ dconstraint( xi[i,j] + exp(logsigma[i,j])/(maxim[i,j]-threshold[i,j])>0)
}
}
for(i in 1:M){
gamma_sigma[i] ~ dnorm(0,tau_sigma)
gamma_xi[i] ~ dnorm(0,tau_xi)
}
for(j in 1:S){
eps_sigma[j] ~ dnorm(a_sigma,phi_sigma)
eps_xi[j] ~ dnorm(a_xi,phi_xi)
alpha[j] ~ dunif(0,1)
}
a_sigma ~ dnorm(b,c)
a_xi ~ dnorm(b,c)
# phi_sigma ~ dgamma(f,f)
# phi_xi ~ dgamma(f,f)
phi_sigma ~ dunif(d,e)
phi_xi ~ dunif(f,g)
tau_sigma ~ dunif(d,e)
tau_xi ~ dunif(f,g)
})
pumpConsts <- list(M= M, S=S, threshold=thresholds, lambda=lambda,maxim=maxim, len=r/5, b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2)
pumpData <-list(y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]])
Hmodel <- nimbleModel(code=code, name ="Hmodel", constants = pumpConsts, data=pumpData)
code <- nimbleCode({
for(j in 1:S){
y_dec[1:len[1],j] ~ dmyModel_lpost(threshold[1,j],exp(logsigma[1,j]),xi[1,j],lambda[1,j],alpha[j])
y_jan[1:len[2],j] ~ dmyModel_lpost(threshold[2,j],exp(logsigma[2,j]),xi[2,j],lambda[2,j],alpha[j])
y_feb[1:len[3],j] ~ dmyModel_lpost(threshold[3,j],exp(logsigma[3,j]),xi[3,j],lambda[3,j],alpha[j])
y_mar[1:len[4],j] ~ dmyModel_lpost(threshold[4,j],exp(logsigma[4,j]),xi[4,j],lambda[4,j],alpha[j])
y_apr[1:len[5],j] ~ dmyModel_lpost(threshold[5,j],exp(logsigma[5,j]),xi[5,j],lambda[5,j],alpha[j])
y_may[1:len[6],j] ~ dmyModel_lpost(threshold[6,j],exp(logsigma[6,j]),xi[6,j],lambda[6,j],alpha[j])
y_jun[1:len[7],j] ~ dmyModel_lpost(threshold[7,j],exp(logsigma[7,j]),xi[7,j],lambda[7,j],alpha[j])
y_jul[1:len[8],j] ~ dmyModel_lpost(threshold[8,j],exp(logsigma[8,j]),xi[8,j],lambda[8,j],alpha[j])
y_aug[1:len[9],j] ~ dmyModel_lpost(threshold[9,j],exp(logsigma[9,j]),xi[9,j],lambda[9,j],alpha[j])
y_sep[1:len[10],j] ~ dmyModel_lpost(threshold[10,j],exp(logsigma[10,j]),xi[10,j],lambda[10,j],alpha[j])
y_oct[1:len[11],j] ~ dmyModel_lpost(threshold[11,j],exp(logsigma[11,j]),xi[11,j],lambda[11,j],alpha[j])
y_nov[1:len[12],j] ~ dmyModel_lpost(threshold[12,j],exp(logsigma[12,j]),xi[12,j],lambda[12,j],alpha[j])}
for(j in 1:S){
for(i in 1:M){
logsigma[i,j] <- gamma_sigma[i]+ eps_sigma[j]
xi[i,j] <- gamma_xi[i]+ eps_xi[j]
constraint_data[i,j] ~ dconstraint( xi[i,j] + exp(logsigma[i,j])/(maxim[i,j]-threshold[i,j])>0)
}
}
for(i in 1:M){
gamma_sigma[i] ~ dnorm(0,tau_sigma)
gamma_xi[i] ~ dnorm(0,tau_xi)
}
for(j in 1:S){
eps_sigma[j] ~ dnorm(a_sigma,phi_sigma)
eps_xi[j] ~ dnorm(a_xi,phi_xi)
alpha[j] ~ dunif(0,1)
}
a_sigma ~ dnorm(b,c)
a_xi ~ dnorm(b,c)
# phi_sigma ~ dgamma(f,f)
# phi_xi ~ dgamma(f,f)
phi_sigma ~ dunif(d,e)
phi_xi ~ dunif(f,g)
tau_sigma ~ dunif(d,e)
tau_xi ~ dunif(f,g)
})
pumpConsts <- list(M = M, S = S, threshold = thresholds, lambda = lambda, maxim = maxim, len = r/5, b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2)
pumpData <-list(y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]])
Hmodel <- nimbleModel(code=code, name ="Hmodel", constants = pumpConsts, data=pumpData)
mcmc.out <- nimbleMCMC(model = Hmodel,
niter =6000, nchains = 2, thin = 10, nburnin = 1000,
monitors = c("a_sigma","a_xi","phi_sigma","phi_xi","tau_sigma",
"tau_xi","gamma_sigma", "gamma_xi", "eps_sigma",
"eps_xi","logsigma", "xi", "alpha"),
summary = TRUE, WAIC = TRUE, setSeed = TRUE, samplesAsCodaMCMC = TRUE)
coda_chain <- mcmc.out$samples
summary(coda_chain)
gelman.diag(coda_chain, confidence = 0.95,  autoburnin = TRUE, multivariate=TRUE)
x11()
acfplot(coda_chain)
mcmc.out <- nimbleMCMC(model = Hmodel,
niter =6000, nchains = 2, thin = 10, nburnin = 1000,
monitors = c("logsigma", "xi", "alpha"),
summary = TRUE, WAIC = TRUE, setSeed = TRUE, samplesAsCodaMCMC = TRUE)
mcmc.out <- nimbleMCMC(model = Hmodel,
niter =6000, nchains = 2, thin = 10, nburnin = 1000,
monitors = c("logsigma", "xi", "alpha"),
summary = TRUE, WAIC = FALSE, setSeed = TRUE, samplesAsCodaMCMC = TRUE)
coda_chain <- mcmc.out$samples
summary(coda_chain)
gelman.diag(coda_chain, confidence = 0.95,  autoburnin = TRUE, multivariate=TRUE)
data_win <- list( M = M, S = S, threshold = thresholds, lambda = lambda, maxim = maxim, r = r/5,
b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2,
y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]] )
setwd("C:/Users/matte/OneDrive/Documenti/GitHub/Bayesian-Approach-to-EVT/main/HierarchicalRandomEffectsModel/Random effects model for sites and months")
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
setwd("C:/Users/matte/OneDrive/Documenti/GitHub/Bayesian-Approach-to-EVT/main/HierarchicalRandomEffectsModel/Random effects model for sites and months")
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Ireland <- read.csv('C:/Users/matte/OneDrive/Documenti/GitHub/Bayesian-Approach-to-EVT/Dataset/Ireland_daily_from1990.csv')
thresholds
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
data_win <- list( M = M, S = S, threshold = thresholds, lambda = lambda, r = r/5,
b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2,
y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]] )
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 1, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 1, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 1, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 1, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 1, thin = 10,seed = 199)
thresholds <- matrix(75,M,S)
lambda <- matrix(NA,M,S)
for(i in 1:M){
for(j in 1:S){
lambda[i,j] <- length(Ireland_monthly[[i]][which(Ireland_monthly[[i]][,j]>thresholds[i,j]),j])/r[i]
}
}
data_win <- list( M = M, S = S, threshold = thresholds, lambda = lambda, r = r/5,
b=0, c=10^-3,d=5*10^-3,e=15*10^-3,f=5*10^-2,g=15*10^-2,
y_dec = Ireland_monthly[[1]], y_jan = Ireland_monthly[[2]], y_feb = Ireland_monthly[[3]],
y_mar = Ireland_monthly[[4]], y_apr = Ireland_monthly[[5]], y_may = Ireland_monthly[[6]],
y_jun = Ireland_monthly[[7]], y_jul = Ireland_monthly[[8]], y_aug = Ireland_monthly[[9]],
y_sep = Ireland_monthly[[10]], y_oct = Ireland_monthly[[11]], y_nov = Ireland_monthly[[12]] )
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 1, thin = 10,seed = 199)
M
S
r
r/5
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 1, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model_Full.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 1, thin = 10,seed = 199)
library(rstan)
library(coda)
library(tidyverse)
library(POT)
library(evir)
library(loo)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Ireland <- read.csv('C:/Users/matte/OneDrive/Documenti/GitHub/Bayesian-Approach-to-EVT/Dataset/Ireland_daily_from1990.csv')
head(Ireland)
unique(Ireland$spot)
df <- data.frame(time=Ireland$year, obs=Ireland$hg, county=Ireland$spot)
n <- length(df$obs)
m <- length(unique(df$county))
spots <- list()
data <- list()
counties <- as.vector(unique(Ireland$spot))
for(i in 1:m){
county <- Ireland[which(Ireland$spot==counties[i]),]
spots[[i]] <- data.frame(time=county$year, obs=county$hg)
data[[i]] <- county$hg
plot(pacf(spots[[i]]$obs))
readline(prompt = "press [enter] to continue or ESC to stop")
graphics.off()
}
}
i=5#loop manuale (modificare i fino a 5)
# initial data selection
initial_threshold <- 91
y <- cbind(spots[[1]][,2],spots[[2]][,2],spots[[3]][,2],spots[[4]][,2],spots[[5]][,2])
N <- length(y[,1])
M <- length(spots)
b <- 0
c <- 10^-3
g<-f<-10^-2
data_win <- list( N = N, M=M, y = y, threshold = thresholds, lambda=lambda,b=b,c=c,f=f,g=g)
fit <- stan(file = "Hierarchical_model.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
library(rstan)
library(coda)
library(tidyverse)
library(POT)
library(evir)
library(loo)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Ireland <- read.csv('C:/Users/matte/OneDrive/Documenti/GitHub/Bayesian-Approach-to-EVT/Dataset/Ireland_daily_from1990.csv')
head(Ireland)
unique(Ireland$spot)
df <- data.frame(time=Ireland$year, obs=Ireland$hg, county=Ireland$spot)
n <- length(df$obs)
m <- length(unique(df$county))
spots <- list()
data <- list()
counties <- as.vector(unique(Ireland$spot))
for(i in 1:m){
county <- Ireland[which(Ireland$spot==counties[i]),]
spots[[i]] <- data.frame(time=county$year, obs=county$hg)
data[[i]] <- county$hg
plot(pacf(spots[[i]]$obs))
readline(prompt = "press [enter] to continue or ESC to stop")
graphics.off()
}
}
thresholds <- rep(NA,m)
lambda <- rep(NA,m)
thresholds <- c(95,95,94,94,85)  #sono state scelte empiricamente
for(i in 1:m){
lambda[i] <- length(spots[[i]][which(spots[[i]]$obs>thresholds[i]),2])/length(spots[[i]]$obs)
}
y <- cbind(spots[[1]][,2],spots[[2]][,2],spots[[3]][,2],spots[[4]][,2],spots[[5]][,2])
N <- length(y[,1])
M <- length(spots)
b <- 0
c <- 10^-3
g<-f<-10^-2
data_win <- list( N = N, M=M, y = y, threshold = thresholds, lambda=lambda,b=b,c=c,f=f,g=g)
fit <- stan(file = "Hierarchical_model.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
fit <- stan(file = "Hierarchical_model.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
setwd("C:/Users/matte/OneDrive/Documenti/GitHub/Bayesian-Approach-to-EVT/main/HierarchicalRandomEffectsModel/Random effect model for sites")
fit <- stan(file = "Hierarchical_model.stan", data = data_win, warmup = 1000, iter = 5000,
chains = 2, thin = 10,seed = 199)
setwd("C:/Users/matte/OneDrive/Documenti/GitHub/Bayesian-Approach-to-EVT/main/HierarchicalRandomEffectsModel/Model the time dependence")
library(rstan)
library(coda)
library(tidyverse)
library(POT)
library(evir)
library(loo)
Ireland <- read.csv('C:/Users/matte/OneDrive/Documenti/GitHub/Bayesian-Approach-to-EVT/Dataset/Ireland_daily_from1990.csv')
head(Ireland)
unique(Ireland$spot)
df <- data.frame(time=Ireland$year, obs=Ireland$hg, county=Ireland$spot)
n <- length(df$obs)
m <- length(unique(df$county))
spots <- list()
data <- list()
counties <- as.vector(unique(Ireland$spot))
for(i in 1:m){
county <- Ireland[which(Ireland$spot==counties[i]),]
spots[[i]] <- data.frame(time=county$year, obs=county$hg)
data[[i]] <- county$hg
plot(pacf(spots[[i]]$obs))
readline(prompt = "press [enter] to continue or ESC to stop")
graphics.off()
}
thresholds <- rep(NA,m)
lambda <- rep(NA,m)
i=1#loop manuale (modificare i fino a 5)
# initial data selection
initial_threshold <- 90
thresholds[i] <- initial_threshold
lambda[i] <- length(spots[[i]][which(spots[[i]]$obs>initial_threshold),2])/length(spots[[i]]$obs)
#MCMC
y <- data[[1]]
N <- length(y)
b <- 0
c <- 10^-3
g<-f<-10^-2
data_win <- list( N = N, y = y, threshold = thresholds[1], lambda=lambda[1],b=b,c=c,f=f,g=g)
fit <- stan(file = "First_order_Markov_chain_dependence.stan", data = data_win, warmup = 1000, iter = 6000,
chains = 3, thin = 10,seed = 109)
fit <- stan(file = "First_order_Markov_chain_dependence.stan", data = data_win, warmup = 1000, iter = 3000,
chains = 2, thin = 10,seed = 109)
